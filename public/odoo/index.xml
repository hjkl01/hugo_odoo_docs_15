<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>odoo on My Note Site</title>
    <link>/odoo/</link>
    <description>Recent content in odoo on My Note Site</description>
    <generator>Hugo</generator>
    <language>zh-hans</language>
    <atom:link href="/odoo/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Odoo开发手册</title>
      <link>/odoo/readme/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>/odoo/readme/</guid>
      <description>&lt;h2 id=&#34;odoo-15开发手册目录&#34;&gt;Odoo 15开发手册目录&lt;/h2&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;a href=&#34;../1&#34;&gt;第一章 使用开发者模式快速入门 Odoo 15&lt;/a&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;a href=&#34;2.md&#34;&gt;第二章 Odoo 15开发之开发环境准备&lt;/a&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;a href=&#34;3.md&#34;&gt;第三章 Odoo 15开发之创建第一个 Odoo 应用&lt;/a&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;a href=&#34;4.md&#34;&gt;第四章 Odoo 15开发之模块继承&lt;/a&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;a href=&#34;5.md&#34;&gt;第五章 Odoo 15开发之导入、导出以及模块数据&lt;/a&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;a href=&#34;6.md&#34;&gt;第六章 Odoo 15开发之模型 - 结构化应用数据&lt;/a&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;a href=&#34;7.md&#34;&gt;第七章 Odoo 15开发之记录集 - 使用模型数据&lt;/a&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;a href=&#34;8.md&#34;&gt;第八章 Odoo 15开发之业务逻辑 - 业务流程的支持&lt;/a&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;a href=&#34;9.md&#34;&gt;第九章 Odoo 15开发之外部 API - 集成第三方系统&lt;/a&gt;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;p&gt;代码地址：&lt;a href=&#34;./source-code/&#34;&gt;Source Code&lt;/a&gt;&lt;/p&gt;&#xA;&lt;h2 id=&#34;odoo-12开发手册目录&#34;&gt;Odoo 12开发手册目录&lt;/h2&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;第一章 &lt;a href=&#34;https://github.com/iTranslateX/odoo-essentials/tree/v12/1.md&#34;&gt;使用开发者模式快速入门 Odoo 12&lt;/a&gt;&lt;/p&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;第二章 &lt;a href=&#34;https://github.com/iTranslateX/odoo-essentials/tree/v12/2.md&#34;&gt;Odoo 12开发之开发环境准备&lt;/a&gt;&lt;/p&gt;</description>
    </item>
    <item>
      <title>第一章 使用开发者模式快速入门 Odoo 15</title>
      <link>/odoo/1/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>/odoo/1/</guid>
      <description>&lt;p&gt;Odoo提供了一个快速应用开发框架，尤其适合构建商业应用。这类应用通常用于保存业务记录和工作流。Odoo 不仅简化了这类应用的构建，还提供了看板、日历、图表等视图的丰富组件，用于创建难以抗拒的用户界面。&lt;/p&gt;&#xA;&lt;p&gt;本章我们直接进入实操，通过web 界面进行编码一探Odoo 的内部，这甚至都不需要配置本地开发环境。这样会让我们直观地感受 Odoo 应用所涉及到的组件。同时，我们还会了解一些查看已有应用及快速构建原型的基本工具。&lt;/p&gt;&#xA;&lt;p&gt;本文主要内容有：&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;to-do (任务清单)应用&lt;/li&gt;&#xA;&lt;li&gt;掌握 Odoo 的基础结构&lt;/li&gt;&#xA;&lt;li&gt;使用 Odoo SaaS 测试库&lt;/li&gt;&#xA;&lt;li&gt;在服务器上安装 Odoo&lt;/li&gt;&#xA;&lt;li&gt;激活开发者模式&lt;/li&gt;&#xA;&lt;li&gt;对模型添加自定义字段&lt;/li&gt;&#xA;&lt;li&gt;新建模型&lt;/li&gt;&#xA;&lt;li&gt;创建菜单项及动作&lt;/li&gt;&#xA;&lt;li&gt;配置访问控制权限&lt;/li&gt;&#xA;&lt;li&gt;创建视图&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;p&gt;学习完本章，读者会熟悉 Odoo 自定义和开发的主要组成部分。&lt;/p&gt;&#xA;&lt;h2 id=&#34;技术准备&#34;&gt;技术准备&lt;/h2&gt;&#xA;&lt;p&gt;学习本章至少要求有一个现代浏览器，如 Firefox 或 Chrome。有浏览器并且可以联网，就可以通过 Odoo SaaS测试库学习本章，无需进行本地安装。&lt;/p&gt;&#xA;&lt;p&gt;当然读者也可以使用本地安装的 Odoo 实例。可以参见&lt;strong&gt;在服务器上安装 Odoo&lt;/strong&gt;一节，其中讲解了 Windows、Ubuntu 和红帽企业版 Linux(RHEL)上安装预打包版本。此外，还可以使用 Docker 安装。&lt;/p&gt;&#xA;&lt;h2 id=&#34;引入-to-do-清单应用&#34;&gt;引入 to-do 清单应用&lt;/h2&gt;&#xA;&lt;p&gt;本章中我们会使用一个示例项目来演示所讲解的概念。这个项目就是一个简单的 to-do清单 Odoo应用。&lt;/p&gt;&#xA;&lt;p&gt;使用这个应用我们可以新增清单，然后标记完成。比如可在项目中添加&lt;em&gt;买鸡蛋&lt;/em&gt;，然后在购买后勾选&lt;em&gt;已完成&lt;/em&gt;。并且To-do 清单应仅对用户自己可见，因而当前用户仅能获取自己的 to-do 列表。为了增加点趣味性，我们添加了一些复杂功能，允许 to-do清单包含一组和任务相关的用户，即工作小组。&lt;/p&gt;&#xA;&lt;p&gt;就该应用我们应考虑以下几层：&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;数据层：通过模型实现&lt;/li&gt;&#xA;&lt;li&gt;业务逻辑层：通过 Pyhon自动化编码实现&lt;/li&gt;&#xA;&lt;li&gt;展示层：通过视图实现&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;p&gt;对于数据层，我们需要一个 To-do 清单模型，我们还将利用内置的 Contact(也称之为 Partner)模型来支持工作组的功能。当然还要记得在新的模型中配置访问权限。&lt;/p&gt;</description>
    </item>
    <item>
      <title>第二章 Odoo 15开发之开发环境准备</title>
      <link>/odoo/2/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>/odoo/2/</guid>
      <description>&lt;p&gt;在更深入学习 Odoo 开发之前，我们需要配置好开发环境并学习相关的基础管理任务。&lt;/p&gt;&#xA;&lt;p&gt;本章中，我们将学习如何配置构建 Odoo 应用所需的环境。我们会配置一个Ubuntu 系统来托管开发服务端实例。可以使用云服务器、本地服务器或者Windows 10上的子系统。&lt;/p&gt;&#xA;&lt;p&gt;学习完本章后，读者可以掌握如何准备开发环境、通过源码运行Odoo以及在同一台机器上拥有多个Odoo项目和多个Odoo版本。读者还会学习Odoo的服务端是如何运行的，以及在开发过程中如何使用它们。&lt;/p&gt;&#xA;&lt;p&gt;本文章主要讲解如下内容：&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;为Odoo服务端配置主机&lt;/li&gt;&#xA;&lt;li&gt;使用源码安装 Odoo&lt;/li&gt;&#xA;&lt;li&gt;管理 Odoo 数据库&lt;/li&gt;&#xA;&lt;li&gt;配置 Odoo 服务端参数&lt;/li&gt;&#xA;&lt;li&gt;查找、安装社区插件&lt;/li&gt;&#xA;&lt;li&gt;使用服务端开发模式&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;p&gt;本章的第一步为检查是否满足本章的技术要求以及配置主机稍后安装Odoo。&lt;/p&gt;&#xA;&lt;h2 id=&#34;开发准备&#34;&gt;开发准备&lt;/h2&gt;&#xA;&lt;p&gt;本章中，我们在Ubuntu 20.04操作系统上使用源码安装 Odoo。只需要使用终端环境，无需Ubuntu的图形化用户界面。&lt;/p&gt;&#xA;&lt;p&gt;如果读者手上没有Ubuntu 20.04系统，也可以使用Windows 10主机。我们可以使用Windows 的Linux 子系统，在Windows系统中获取到Ubuntu环境。&lt;/p&gt;&#xA;&lt;p&gt;本章的相关代码参见配套的GitHub仓库的&lt;strong&gt;ch02/&lt;/strong&gt; 目录中。&lt;/p&gt;&#xA;&lt;h2 id=&#34;设置-odoo-服务宿主机&#34;&gt;设置 Odoo 服务宿主机&lt;/h2&gt;&#xA;&lt;p&gt;推荐使用Debian/Ubuntu来运行 Odoo 服务，这也是参考部署平台。Odoo 自己的 SaaS 平台也运行在 Debian 之上，这也是社区中最主流的选择。也就是说使用Debian 或 Ubuntu 会更容易寻求到帮助或建议。&lt;/p&gt;&#xA;&lt;blockquote&gt;&#xA;&lt;p&gt;&lt;strong&gt;注&lt;/strong&gt;：开发、运行Odoo还可以选择Odoo.sh服务。它提供了基于Git的开发工作流并提供了需用于运行生产系统的所有补充服务，如发送、接收邮件。如果读者对此感兴趣，&lt;a href=&#34;https://www.odoo.com/documentation/user/15.0/odoo_sh/documentation.html.&#34;&gt;Odoo官方文档&lt;/a&gt;中有很完善的介绍。&lt;/p&gt;&#xA;&lt;/blockquote&gt;&#xA;&lt;p&gt;如果已有Ubuntu 20.04，就可以开始学习了。只需要确定是否进行了提权以执行必要的安装步骤。在终端中运行如下命令进行检查。如若成功，即可进入后面的学习：&lt;/p&gt;&#xA;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;$ sudo apt list&#xA;&lt;/code&gt;&lt;/pr</description>
    </item>
    <item>
      <title>第三章 Odoo 15开发之创建第一个 Odoo 应用</title>
      <link>/odoo/3/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>/odoo/3/</guid>
      <description>&lt;p&gt;Odoo 开发通常都需要创建自己的插件模块。本文中我们通过创建首个Odoo应用，学习在 Odoo 中显示、安装应用的步骤。&lt;/p&gt;&#xA;&lt;p&gt;我们将从开发工作流的基础学起，即创建、安装新模块，然后升级开发迭代中更新的代码。&lt;/p&gt;&#xA;&lt;p&gt;Odoo 采用类 MVC(Model-View-Controller)的架构，我们会深入到各层来实现一个图书应用。&lt;/p&gt;&#xA;&lt;p&gt;本文主要包含以下内容：&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;图书项目总览&lt;/li&gt;&#xA;&lt;li&gt;步骤1：新建插件模块&lt;/li&gt;&#xA;&lt;li&gt;步骤2：新建应用&lt;/li&gt;&#xA;&lt;li&gt;步骤3：添加自动化测试&lt;/li&gt;&#xA;&lt;li&gt;步骤4：实现模型层&lt;/li&gt;&#xA;&lt;li&gt;步骤5：配置访问权限&lt;/li&gt;&#xA;&lt;li&gt;步骤6：实现后台视图层&lt;/li&gt;&#xA;&lt;li&gt;步骤7：实现业务逻辑层&lt;/li&gt;&#xA;&lt;li&gt;步骤8：实现网站用户界面(&lt;strong&gt;UI&lt;/strong&gt;)&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;p&gt;通过这种方法，我们会渐进学习组成应用的基本组成，并体验从零构建Odoo模块的迭代流程。&lt;/p&gt;&#xA;&lt;h2 id=&#34;技术准备&#34;&gt;技术准备&lt;/h2&gt;&#xA;&lt;p&gt;学习本文需安装 Odoo 服务端，并可通过命令行启动服务来进行模块安装和运行测试之类的操作。如果还没有可用的Odoo开发环境，请参照&lt;a href=&#34;2.md&#34;&gt;第二章 Odoo 15开发之开发环境准备&lt;/a&gt;。&lt;/p&gt;&#xA;&lt;p&gt;本章中我们从零开始创建第一个 Odoo 应用，无需任务初始代码。&lt;/p&gt;&#xA;&lt;p&gt;本章的代码可通过 &lt;a href=&#34;source-code/ch03/&#34;&gt;GitHub 仓库&lt;/a&gt;的&lt;strong&gt;ch03&lt;/strong&gt;目录进行查看。&lt;/p&gt;&#xA;&lt;blockquote&gt;&#xA;&lt;p&gt;&lt;strong&gt;注：&lt;/strong&gt; 本章示例代码中使用的数据库名为 library，如你使用了其它数据库名称，请自行修改&lt;/p&gt;&#xA;&lt;/blockquote&gt;&#xA;&lt;h2 id=&#34;图书项目总览&#34;&gt;图书项目总览&lt;/h2&gt;&#xA;&lt;p&gt;为更好地讲解本章知识点，我们通过案例进行学习。一起来创建一个管理图书的 Odoo 应用。该项目会在后续章节中持续使用，每篇文章都会进行一次迭代，对应用添加新的功能。本文中创建图书应用的第一个版本。&lt;/p&gt;&#xA;&lt;p&gt;实现的第一个功能是图书目录。目录让我们可以在图书馆中保存图书的记录和图书详情。我们希望这个目录是可以对外访问的，可以查到可借阅的图书。&lt;/p&gt;&#xA;&lt;p&gt;图书应包含如下数据：&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;标题&lt;/li&gt;&#xA;&lt;li&gt;作者&lt;/li&gt;&#xA;&lt;li&gt;出版社&lt;/li&gt;&#xA;&lt;li&gt;出版日期&lt;/li&gt;&#xA;&lt;li&gt;封面图&lt;/li&gt;&#xA;&lt;li&gt; ISBN（国际标准书号）：包含ISBN的有效性检查&lt;/li&gt;&#xA;&lt;li&gt;上架标记；标识图书是否可公开发布&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;p&gt;按Odoo基本应用的惯例，图书应用有两个用户有组：图书用户和图书管理员。用户可执行日常操作，管理员还可以编辑应用的配置。&lt;/p&gt;</description>
    </item>
    <item>
      <title>第四章 Odoo 15开发之模块继承</title>
      <link>/odoo/4/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>/odoo/4/</guid>
      <description>&lt;p&gt;Odoo 的一项强大之处是无需直接修改所扩展模块的代码即可添加功能。这都归功于与自身代码组件相独立的功能继承。对模块的扩展可通过继承机制实现，以已有对象的修改层的形式。这些修改可以发生在每个层面，包括模型、视图和业务逻辑层面。我们不是直接修改原有模块，而是新建一个模块，采用所要做的修改在已有模块上新增一层。&lt;/p&gt;&#xA;&lt;p&gt;上一章讲解了如何从零开始创建应用。本章中我们将学习如何创建继承自已有应用或模块的模块，并使用原有的内核或社区功能。&lt;/p&gt;&#xA;&lt;p&gt;为此，我们会讲解如下内容：&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;学习项目-扩展图书应用&lt;/li&gt;&#xA;&lt;li&gt;对已有模型新增字段&lt;/li&gt;&#xA;&lt;li&gt;使用经典的in-place继承来扩展模型&lt;/li&gt;&#xA;&lt;li&gt;其它模型继承机制&lt;/li&gt;&#xA;&lt;li&gt;视图和数据继承&lt;/li&gt;&#xA;&lt;li&gt;网页继承&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;p&gt;学习完本章后，读者可以对已有Odoo应用创建继承模块。可以对应用的任一组件做出修改：模型、视图、业务逻辑代码、网页控制器和网页模板。&lt;/p&gt;&#xA;&lt;h2 id=&#34;开发准备&#34;&gt;开发准备&lt;/h2&gt;&#xA;&lt;p&gt;本文要求可通过命令行来启动 Odoo 服务。&lt;/p&gt;&#xA;&lt;p&gt;代码将在&lt;a href=&#34;3.md&#34;&gt;第三章 Odoo 15开发之创建第一个 Odoo 应用&lt;/a&gt;的基础上进行修改。通过该篇的学习我们已在插件路径添加了代码并在数据安装了library_app模块。&lt;/p&gt;&#xA;&lt;p&gt;本章对项目新增&lt;strong&gt;library_member&lt;/strong&gt;插件模块。相应的代码请见&lt;a href=&#34;https://github.com/iTranslateX/odoo-essentials/tree/main/source-code/&#34;&gt;GitHub 仓库&lt;/a&gt;的&lt;strong&gt;ch04&lt;/strong&gt;目录。&lt;/p&gt;&#xA;&lt;h2 id=&#34;学习项目-扩展图书馆应用&#34;&gt;学习项目-扩展图书馆应用&lt;/h2&gt;&#xA;&lt;p&gt;在&lt;a href=&#34;3.md&#34;&gt;第三章 Odoo 15开发之创建第一个 Odoo 应用&lt;/a&gt;中我们创建了一个图书应用的初始模块，可供查看图书清单。现在我们要对图书应用进行扩展添加图书会员并允许他们借书。这需要创建一个扩展模块library_member。&lt;/p&gt;&#xA;&lt;p&gt;我们要提供如下的功能：&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;图书可进行能否借阅的控制。该信息要在图书表单和网站的目录页面显示。&lt;/li&gt;&#xA;&lt;li&gt;一些图书会员数据，以及图书会员卡号和个人数据，如姓名、地址和email。&lt;/li&gt;&#xA;&lt;li&gt;应在借阅表单提供会员发消息和社交功能，包括计划活动微件，使协作更为流畅。&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;p&gt;后面我们会引入一个功能让会员可从图书馆借书，但这不在当前的讨论范畴。在后面的几章中会逐步展开。&lt;/p&gt;&#xA;&lt;h3 id=&#34;图书&#34;&gt;图书&lt;/h3&gt;&#xA;&lt;p&gt;以下是要对图书所要做的技术修改的汇总：&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;添加一个&lt;strong&gt;Is Available?&lt;/strong&gt; 字段。目前通过手动管理，以后会自动化。&lt;/li&gt;&#xA;&lt;li&gt;扩展 ISBN 验证逻辑来同时支持10位数的ISBN。&lt;/li&gt;&#xA;&lt;li&gt;扩展图书目录页来标识不可借阅图书并允许用户过滤出可借图书&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h3 id=&#34;会员&#34;&gt;会员&lt;/h3&gt;&#xA;&lt;p&gt;以下是要对图书会员所要做的技术修改的汇总：&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;添加一个新模型来存储姓名、卡号和 Email、地址一类的联系信息&lt;/li&gt;&#xA;&lt;li&gt;添加社交讨论和计划活动功能&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;p&gt;首先在&lt;strong&gt;library_app&lt;/strong&gt;同级目录创建一个&lt;strong&gt;library_member&lt;/strong&gt;目录作为扩展模块，并在其中添加两个文件，一个&lt;code&gt;__init__.py&lt;/code&gt;空文件和一个包含如下内容的&lt;code&gt;__manifest__.py&lt;/code&gt;文件：&lt;/p&gt;</description>
    </item>
    <item>
      <title>第五章 Odoo 15开发之导入、导出以及模块数据</title>
      <link>/odoo/5/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>/odoo/5/</guid>
      <description>&lt;p&gt;大多数Odoo 模块的定义，如用户界面和权限规则，实际是存储在对应数据表中的数据记录。模块中的 XML 和 CSV 文件不是 Odoo 应用运行时使用，而是将这些定义加载到数据表的手段。&lt;/p&gt;&#xA;&lt;p&gt;正是因为这个原因，Odoo 模块的一个重要部分是在文件中放入数据以便插件安装时将其加入数据库。&lt;/p&gt;&#xA;&lt;p&gt;此外，掌握Odoo的数据展现的格式对于在项目实施时导入、导出业务数据也很重要。&lt;/p&gt;&#xA;&lt;p&gt;本章的主要内容有：&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;理解外部标识符的概念&lt;/li&gt;&#xA;&lt;li&gt;导入导出数据文件&lt;/li&gt;&#xA;&lt;li&gt;使用 CSV 文件&lt;/li&gt;&#xA;&lt;li&gt;添加模块数据&lt;/li&gt;&#xA;&lt;li&gt;使用 XML 数据文件&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;p&gt;学完本章，读者可以执行数据导入导出，将初始数据加入到数据库中，并可对所创建模块自动创建默认及演示数据。&lt;/p&gt;&#xA;&lt;h2 id=&#34;开发准备&#34;&gt;开发准备&lt;/h2&gt;&#xA;&lt;p&gt;本章要求读者可以运行Odoo 服务并已安装前面我们此前开发的图书应用。&lt;/p&gt;&#xA;&lt;p&gt;相关代码请见&lt;a href=&#34;https://github.com/alanhou/odoo12-development/tree/master/custom-addons&#34;&gt;GitHub 仓库&lt;/a&gt;的&lt;strong&gt;ch05/&lt;/strong&gt; 目录。其中包含&lt;a href=&#34;3.md&#34;&gt;第三章 Odoo 15开发之创建第一个 Odoo 应用&lt;/a&gt;中的&lt;strong&gt;library_app&lt;/strong&gt;，以及本章中所新增的代码。&lt;/p&gt;&#xA;&lt;h2 id=&#34;理解外部标识符的概念&#34;&gt;理解外部标识符的概念&lt;/h2&gt;&#xA;&lt;p&gt;外部标识符，也称为&lt;strong&gt;XML ID&lt;/strong&gt;，是用于唯一标识 Odoo 中特定记录的易于阅读的字符串标识符。在Odoo 中加载数据时它们就很重要了，这样可以对已有数据记录进行修改或在其它数据记录中引用它。&lt;/p&gt;&#xA;&lt;p&gt;首先我们将讨论外部标识符的工作原理以及如何检查外部标识符。然后我们会学习如何使用网页客户端来查找指定数据记录的外部标识符，在创建插件模块或扩展已有功能时需要经常用到。&lt;/p&gt;&#xA;&lt;h3 id=&#34;外部标识符的工作原理&#34;&gt;外部标识符的工作原理&lt;/h3&gt;&#xA;&lt;p&gt;我们先从标识部的原理开始。记录在数据库中的真实标识符是自动分配的序列号，在安装模块时无法预先知道将要分配的具体ID。外部标识符让我们无需知道真实分配的数据库 ID便可以引用一条相关记录。XML ID 为数据库 ID 提供了一个方便的别名，借此我们可以在任何时刻引用某一指定记录。&lt;/p&gt;&#xA;&lt;p&gt;Odoo 模块数据文件中使用XML ID来定义记录。其中一个原因是避免在升级模块时创建重复的记录，在升级时会再次将数据文件加载到数据库中。我们要检测已有记录来进行更新，而不是重复创建记录。&lt;/p&gt;&#xA;&lt;p&gt;使用XML ID的另一个原因是支持交叉数据：即需引用其它数据记录的数据记录。因为我们无法知道真实数据库 ID，使用XML ID来由 Odoo 框架处理透明的转换。&lt;/p&gt;</description>
    </item>
    <item>
      <title>第六章 Odoo 15开发之模型 - 结构化应用数据</title>
      <link>/odoo/6/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>/odoo/6/</guid>
      <description>&lt;p&gt;本章我们更进一步学习模型层，以及如何使用模型来设计支撑应用的数据结构。我们会探讨可用的模型类型，以及在使用这些类型时如何定义强制进行数据验证的约束。&lt;/p&gt;&#xA;&lt;p&gt;模型由支持不同数据类型的数据字段组成，一些字段类型支持定义模型间的关联。对于字段更高级的使用包含使用具体的业务逻辑自动计算的值。&lt;/p&gt;&#xA;&lt;p&gt;本文的主要内容有：&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;学习项目 - 优化图书应用&lt;/li&gt;&#xA;&lt;li&gt;创建模型&lt;/li&gt;&#xA;&lt;li&gt;创建字段&lt;/li&gt;&#xA;&lt;li&gt;模型间的关联&lt;/li&gt;&#xA;&lt;li&gt;计算字段&lt;/li&gt;&#xA;&lt;li&gt;模型约束&lt;/li&gt;&#xA;&lt;li&gt;Odoo的 base 模型总览&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;p&gt;通过这些内容，我们将学习如何为Odoo项目创建大型数据结构。在学完本章后，读者对于架构数据模型相关的功能应该会有清晰的认知。&lt;/p&gt;&#xA;&lt;h2 id=&#34;开发准备&#34;&gt;开发准备&lt;/h2&gt;&#xA;&lt;p&gt;本文代码基于&lt;a href=&#34;3.md&#34;&gt;第三章 Odoo 15开发之创建第一个 Odoo 应用&lt;/a&gt;中所创建的代码。相关代码参见&lt;a href=&#34;https://github.com/iTranslateX/odoo-essentials/tree/main/source-code/&#34;&gt; GitHub 仓库&lt;/a&gt;的&lt;strong&gt;ch06/&lt;/strong&gt; 目录。&lt;/p&gt;&#xA;&lt;p&gt;请将其添加至插件路径中，并安装好&lt;strong&gt;library_app&lt;/strong&gt;模块。&lt;/p&gt;&#xA;&lt;h2 id=&#34;学习项目---优化图书应用&#34;&gt;学习项目 - 优化图书应用&lt;/h2&gt;&#xA;&lt;p&gt;在&lt;a href=&#34;3.md&#34;&gt;第三章 Odoo 15开发之创建第一个 Odoo 应用&lt;/a&gt;中，我们创建了一个library_app插件模块，实现了一个简单的library.book模型用于展示图书目录。本章中，我们将回到该模块来丰富存储的图书数据。&lt;/p&gt;&#xA;&lt;p&gt;我们使用如下结构添加一个分类层级，用于图书分类：&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;Name：分类标题&lt;/li&gt;&#xA;&lt;li&gt;Parent：所属父级分类&lt;/li&gt;&#xA;&lt;li&gt;Subcategories：将此作为父级分类的子分类&lt;/li&gt;&#xA;&lt;li&gt;Featured book或author: 此分类中所选图书或作者&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;p&gt;我们会添加一些字段来展示 Odoo中字段的数据类型。我们还会为图书模型添加一些验证约束：&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;标题和出版日期应唯一&lt;/li&gt;&#xA;&lt;li&gt;输入的ISBN应为有效&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;p&gt;下面我们就更深度地学习Odoo模型，学习可以使用的所有选项。&lt;/p&gt;&#xA;&lt;h2 id=&#34;创建模型&#34;&gt;创建模型&lt;/h2&gt;&#xA;&lt;p&gt;模型是 Odoo 框架的核心。它们描述应用的数据结构，是服务端应用和数据库存储之间的桥梁。可围绕模型实现业务逻辑来为应用添加功能，用户界面所提供的用户体验也建立在模型之上。&lt;/p&gt;</description>
    </item>
    <item>
      <title>第七章 Odoo 15开发之记录集 - 使用模型数据</title>
      <link>/odoo/7/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>/odoo/7/</guid>
      <description>&lt;p&gt;在前面的章节中，我们概览了模型创建以及如何向模型加载数据。现在我们已有数据模型和相关数据，是时候学习如何编程与其进行交互了。&lt;/p&gt;&#xA;&lt;p&gt;业务应用需要业务逻辑来计算数据、执行验证或自动化操作。&lt;strong&gt;Odoo&lt;/strong&gt;框架API为开发者提供了工具用于实现这种业务逻辑。大多数时候是查询、转换及写入数据。&lt;/p&gt;&#xA;&lt;p&gt;Odoo在底层数据库之上实现了一个&lt;strong&gt;ORM&lt;/strong&gt;（对象关系映射）层。ORM提供了&lt;strong&gt;API&lt;/strong&gt;（应用程序接口）用于与数据交互。这种API提供了一个执行环境以及记录集的创建，供对象操作数据库中存储的数据。&lt;/p&gt;&#xA;&lt;p&gt;本单讲解如何使用执行环境和记录集，通过所需要的工具实现业务处理。&lt;/p&gt;&#xA;&lt;p&gt;本章主要讲解以下内容：&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;使用 shell 命令交互式地学习 ORM API&lt;/li&gt;&#xA;&lt;li&gt;理解执行环境和上下文&lt;/li&gt;&#xA;&lt;li&gt;使用记录集和作用域(domain)查询数据&lt;/li&gt;&#xA;&lt;li&gt;访问记录集中的数据&lt;/li&gt;&#xA;&lt;li&gt;在记录中写入&lt;/li&gt;&#xA;&lt;li&gt;处理日期和时间&lt;/li&gt;&#xA;&lt;li&gt;使用记录集&lt;/li&gt;&#xA;&lt;li&gt;事务和底层 SQL&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;p&gt;学完本章后，读者可以使用Odoo代码执行所有这些操作，还可使用这些工具来实现自己的业务处理。&lt;/p&gt;&#xA;&lt;h2 id=&#34;开发准备&#34;&gt;开发准备&lt;/h2&gt;&#xA;&lt;p&gt;本章代码使用交互式 shell 命令行执行，无需使用前面章节的代码。相关代码参见&lt;a href=&#34;https://github.com/iTranslateX/odoo-essentials/tree/main/source-code/&#34;&gt; GitHub 仓库&lt;/a&gt;的&lt;strong&gt;ch07/ch07_recorsets_code.py&lt;/strong&gt;文件。&lt;/p&gt;&#xA;&lt;h2 id=&#34;使用-shell-命令行&#34;&gt;使用 shell 命令行&lt;/h2&gt;&#xA;&lt;p&gt;Python带有命令行界面，是研究其语法一个很好的方式。Odoo 也有类似的功能，这就是 shell 命令行。可以交互式地执行命令了解其机制。&lt;/p&gt;&#xA;&lt;p&gt;使用这种命令行，在启动Odoo时加上&lt;strong&gt;shell&lt;/strong&gt;，以及通常启动Odoo所使用的那些选项：&lt;/p&gt;&#xA;&lt;p&gt;在命令行中执行以下命令并指定数据库即可使用：&lt;/p&gt;&#xA;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;(env15) $ odoo shell -c library.conf&#xA;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;此时在终端中可以看到正常的服务启动信息，但这时不是启动监听请求的HTTP服务，而是会进行一个等待输入的Python命令窗口。&lt;/p&gt;&#xA;&lt;p&gt;这一交互式命令界面模拟了以&lt;strong&gt;OdooBot&lt;/strong&gt;超级用户运行&lt;strong&gt;class&lt;/strong&gt;方法内的环境。可以使用&lt;strong&gt;self&lt;/strong&gt;变量，它被设置为&lt;strong&gt;OdooBot&lt;/strong&gt;超级用户记录对象。&lt;/p&gt;&#xA;&lt;p&gt;例如，使用如下命令查看&lt;strong&gt;self&lt;/strong&gt;记录集：&lt;/p&gt;&#xA;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;&amp;gt;&amp;gt;&amp;gt; self&#xA;res.users(1,)&#xA;&amp;gt;&amp;gt;&amp;gt; self._name&#xA;&amp;#39;res.users&amp;#39;&#xA;&amp;gt;&amp;gt;&amp;gt; self.name&#xA;&amp;#39;OdooBot&amp;#39;&#xA;&amp;gt;&amp;gt;&amp;gt; self.login&#xA;&amp;#39;__system__&amp;#39;&#xA;&lt;/code&gt;&lt;/pr</description>
    </item>
    <item>
      <title>第八章 Odoo 15开发之业务逻辑 - 业务流程的支持</title>
      <link>/odoo/8/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>/odoo/8/</guid>
      <description>&lt;p&gt;在前面的文章中，我们学习了如何使用模型层构建应用数据结构，然后使用ORM API 和记录集查看和操作这些数据。&lt;/p&gt;&#xA;&lt;p&gt;本章中，我们把前面所学串到一起实现一些应用中常见的逻辑模式。我们会学习一起触发业务逻辑的方式，以及支撑这些方式的一些常见模式。我们还将学习一些重要的开发技巧，如打日志、调试和测试。&lt;/p&gt;&#xA;&lt;p&gt;本章的主要内容有&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;学习项目-图书借阅模块&lt;/li&gt;&#xA;&lt;li&gt;触发业务逻辑的方式&lt;/li&gt;&#xA;&lt;li&gt;理解记录集的ORM方法装饰器&lt;/li&gt;&#xA;&lt;li&gt;探讨一些数据模型模式&lt;/li&gt;&#xA;&lt;li&gt;使用ORM内置方法&lt;/li&gt;&#xA;&lt;li&gt;添加onchange用户界面逻辑&lt;/li&gt;&#xA;&lt;li&gt;消息和活动功能&lt;/li&gt;&#xA;&lt;li&gt;创建向导&lt;/li&gt;&#xA;&lt;li&gt;抛出异常&lt;/li&gt;&#xA;&lt;li&gt;编写单元测试&lt;/li&gt;&#xA;&lt;li&gt;使用日志消息&lt;/li&gt;&#xA;&lt;li&gt;学习一些开发工具&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;p&gt;学完本章后，读者可以自如地设计、实现业务逻辑自动化以及了解如何测试、调试代码。&lt;/p&gt;&#xA;&lt;h2 id=&#34;开发准备&#34;&gt;开发准备&lt;/h2&gt;&#xA;&lt;p&gt;本章中我们会创建一个&lt;strong&gt;library_checkout&lt;/strong&gt;插件模块。它依赖于前面章节中所创建的&lt;strong&gt;library_app&lt;/strong&gt;和&lt;strong&gt;library_member&lt;/strong&gt;插件模块。&lt;/p&gt;&#xA;&lt;p&gt;这些插件模块的代码请参见&lt;a href=&#34;https://github.com/iTranslateX/odoo-essentials/tree/main/source-code/&#34;&gt;GitHub 仓库&lt;/a&gt;的&lt;strong&gt;ch08&lt;/strong&gt;目录。&lt;/p&gt;&#xA;&lt;p&gt;这些插件模块要放到Odoo的插件路径中，这样才能安装使用。&lt;/p&gt;&#xA;&lt;h2 id=&#34;学习项目图书借阅模块&#34;&gt;学习项目–图书借阅模块&lt;/h2&gt;&#xA;&lt;p&gt;图书应用的主数据结构已就绪。现在需要对系统添加交易了。让图书会员可借阅书籍。也即我们要跟踪图书是否可借阅以及是否归还。&lt;/p&gt;&#xA;&lt;p&gt;每本书的借阅都有一个生命周期，从图书登记到图书被归还。这可通过看板视图表示为简单工作流，看板视图中每个阶段(stage)可展现为一列，工作项和借阅请求流从左侧列到右侧列，直至完成为止。&lt;/p&gt;&#xA;&lt;p&gt;在本章中，我们集中学习实现这一功能的数据模型和业务逻辑。&lt;/p&gt;&#xA;&lt;p&gt;用户界面部分的详情将在&lt;a href=&#34;10.md&#34;&gt;第十章 Odoo 15开发之后台视图 - 设计用户界面&lt;/a&gt;中讨论，看板视图在&lt;a href=&#34;11.md&#34;&gt;第十一章 Odoo 15开发之看板视图和用户端 QWeb&lt;/a&gt;中讨论。我们来快速过一遍数据模型吧。&lt;/p&gt;&#xA;&lt;h3 id=&#34;准备数据模型&#34;&gt;准备数据模型&lt;/h3&gt;&#xA;&lt;p&gt;首先我们就规则图书借阅功能所需的数据模型。&lt;/p&gt;&#xA;&lt;p&gt;图书借阅模型应包含如下字段：&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;借阅图书的会员（必填）&lt;/li&gt;&#xA;&lt;li&gt;借阅请求日期（默认为当天）&lt;/li&gt;&#xA;&lt;li&gt;负责借阅的用户（默认为当前用户）&lt;/li&gt;&#xA;&lt;li&gt;借阅路线，包含请求借阅的一本或多本图书&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;p&gt;要支撑借阅生命周期，需要添加如下内容：&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;请求的阶段：已选中、可借阅、已借出、已归还或已取消&lt;/li&gt;&#xA;&lt;li&gt;待归还日期，图书应当归还的日期&lt;/li&gt;&#xA;&lt;li&gt;归还，图书归还的日期&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;p&gt;我们先新建&lt;strong&gt;library_checkout&lt;/strong&gt;模块并实现图书借阅模型的初始版本。与此前章节相比此处并没有引入新的知识，用于提供一个基础供本章后续构建新功能。&lt;/p&gt;</description>
    </item>
    <item>
      <title>第九章 Odoo 15开发之外部 API - 集成第三方系统</title>
      <link>/odoo/9/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>/odoo/9/</guid>
      <description>&lt;p&gt;Odoo 服务端提供有外部 API，可供网页客户端和其它客户端应用使用。本章中我们将学习如何Odoo 的外部 API来实现将其Odoo服务端作为后端的外部应用。&lt;/p&gt;&#xA;&lt;p&gt;可通过编写脚本来加载或修改Odoo数据，或是集成Odoo现有的业务应用，作为对Odoo应用一种补充。&lt;/p&gt;&#xA;&lt;p&gt;我们将描述如何使用Odoo RPC调用，然后根据所学知识使用 Python为图书应用创建一个简单的命令行应用。&lt;/p&gt;&#xA;&lt;p&gt;本章的主要内容有：&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;介绍学习项目：图书目录的客户端应用&lt;/li&gt;&#xA;&lt;li&gt;在客户端机器上配置 Python&lt;/li&gt;&#xA;&lt;li&gt;探索Odoo的外部API&lt;/li&gt;&#xA;&lt;li&gt;实现客户端应用的XML-RPC接口&lt;/li&gt;&#xA;&lt;li&gt;实现客户端应用的用户界面&lt;/li&gt;&#xA;&lt;li&gt;使用OdooRPC库&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;p&gt;学完本章后，读者可以创建一个简单的Python应用，使用Odoo作为后端进行查询和数据存储。&lt;/p&gt;&#xA;&lt;h2 id=&#34;开发准备&#34;&gt;开发准备&lt;/h2&gt;&#xA;&lt;p&gt;本文基于&lt;a href=&#34;3.md&#34;&gt;第三章 Odoo 15开发之创建第一个 Odoo 应用&lt;/a&gt;创建的代码，具体代码请参见 &lt;a href=&#34;https://github.com/iTranslateX/odoo-essentials/tree/main/source-code&#34;&gt;GitHub 仓库&lt;/a&gt;。应将library_app模块放在addons路径下并进行安装。为保持前后一致，我们将使用&lt;a href=&#34;2.md&#34;&gt;第二章 Odoo 15开发之开发环境准备&lt;/a&gt;中的安装操作。本章完成后的代码请参见 &lt;a href=&#34;https://github.com/iTranslateX/odoo-essentials/tree/main/source-code/ch09&#34;&gt;GitHub 仓库&lt;/a&gt;。&lt;/p&gt;&#xA;&lt;h2 id=&#34;学习项目-图书目录客户端&#34;&gt;学习项目-图书目录客户端&lt;/h2&gt;&#xA;&lt;p&gt;本文中，我们将开发一个简单的客户端应用来管理图书目录。这是一个命令行接口(CLI) 应用，使用 Odoo 来作为后端。应用的功能很基础，核心放在用于与 Odoo服务端交互的技术。&lt;/p&gt;&#xA;&lt;p&gt;这个简单CLI应用可以完成如下功能：&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;通过标题搜索并列出图书&lt;/li&gt;&#xA;&lt;li&gt;向目录添加新书籍&lt;/li&gt;&#xA;&lt;li&gt;编辑图书标题&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;p&gt;我们的主要目标是使用Odoo对外API，因此不希望引用其它读者可能不太熟悉的编程语言。有了这一出发点，最好的方式是就是使用Python来实现客户端应用。不过只要掌握了一种语言的XML-RPC库，相关处理RPC的技术同样适用于其它语言。&lt;/p&gt;&#xA;&lt;p&gt;这个应用是一个 Python 脚本，等待输入命令来执行操作。示例如下：&lt;/p&gt;&#xA;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;$ python3 library.py add &amp;#34;Moby-Dick&amp;#34;&#xA;$ python3 library.py list &amp;#34;moby&amp;#34;&#xA;60 Moby-Dick&#xA;$ python3 library.py set 60 &amp;#34;Moby Dick&amp;#34;&#xA;&lt;/code&gt;&lt;/pr</description>
    </item>
    <item>
      <title>第十章 Odoo 12开发之后台视图 - 设计用户界面</title>
      <link>/odoo/10/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>/odoo/10/</guid>
      <description>&lt;p&gt;本文为&lt;a href=&#34;README.md&#34;&gt;最好用的免费ERP系统Odoo 12开发手册&lt;/a&gt;系列文章第十篇。&lt;/p&gt;&#xA;&lt;p&gt;本文将学习如何为用户创建图形化界面来与图书应用交互。我们将了解不同视图类型和小组件(widgets)之间的差别，以及如何使用它们来提供更优的用户体验。&lt;/p&gt;&#xA;&lt;p&gt;本文主要内容有：&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;菜单项&lt;/li&gt;&#xA;&lt;li&gt;窗口操作(Window Actions)&lt;/li&gt;&#xA;&lt;li&gt;表单视图结构&lt;/li&gt;&#xA;&lt;li&gt;字段&lt;/li&gt;&#xA;&lt;li&gt;按钮和智能按钮&lt;/li&gt;&#xA;&lt;li&gt;动态视图元素&lt;/li&gt;&#xA;&lt;li&gt;列表视图&lt;/li&gt;&#xA;&lt;li&gt;搜索视图&lt;/li&gt;&#xA;&lt;li&gt;其它视图类型&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h2 id=&#34;开发准备&#34;&gt;开发准备&lt;/h2&gt;&#xA;&lt;p&gt;我们将继续使用library_checkout插件模块，它已经有了模型层，现在需要视图层来实现用户界面。本文中的代码基于第八章 &lt;a href=&#34;8.md&#34;&gt;Odoo 12开发之业务逻辑 - 业务流程的支持&lt;/a&gt;，相关代码请参见 &lt;a href=&#34;source-code/chapter8&#34;&gt;GitHub 仓库&lt;/a&gt;，本章完成后代码也请参见 &lt;a href=&#34;source-code/chapter10&#34;&gt;GitHub仓库&lt;/a&gt;。&lt;/p&gt;&#xA;&lt;h2 id=&#34;菜单项&#34;&gt;菜单项&lt;/h2&gt;&#xA;&lt;p&gt;用户界面的入口是菜单项，菜单项形成一个层级结构，最顶级项为应用，其下一级为每个应用的主菜单。还可以添加更深的子菜单。可操作菜单与窗口操作关联，它告诉客户端在点击了菜单项后应执行什么操作。&lt;/p&gt;&#xA;&lt;p&gt;菜单项存储在ir.ui.menu模型中，可通过Settings &amp;gt; Technical &amp;gt; User Interface &amp;gt; Menu Items菜单进行查看。&lt;/p&gt;&#xA;&lt;p&gt;library_app模块为图书创建了一个顶级菜单，library_checkout插件模块添加了借阅和借阅阶段的菜单项。在library_checkout/views/library_menu.xml文件中，借阅的菜单项 XML 代码如下：&lt;/p&gt;&#xA;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;    &amp;lt;menuitem id=&amp;#34;menu_library_checkout&amp;#34;&#xA;        name=&amp;#34;Checkout&amp;#34;&#xA;        action=&amp;#34;action_library_checkout&amp;#34;&#xA;        parent=&amp;#34;library_app.menu_library&amp;#34; /&amp;gt;&#xA;&lt;/code&gt;&lt;/pr</description>
    </item>
    <item>
      <title>第十一章 Odoo 12开发之看板视图和用户端 QWeb</title>
      <link>/odoo/11/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>/odoo/11/</guid>
      <description>&lt;p&gt;本文为&lt;a href=&#34;README.md&#34;&gt;最好用的免费ERP系统Odoo 12开发手册&lt;/a&gt;系列文章第十一篇。&lt;/p&gt;&#xA;&lt;p&gt;QWeb 是 Odoo 使用的模板引擎，它基于 XML 来生成 HTML 片断和页面。通过 QWeb可生成内容丰富的看板(Kankan)视图、报表和 CMS 网页。本文中我们将学习QWeb 语法以及如何使用 QWeb 来创建我们自己的看板视图和自定义报表。&lt;/p&gt;&#xA;&lt;p&gt;本文主要内容有：&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;看板是什么？&lt;/li&gt;&#xA;&lt;li&gt;设计看板视图&lt;/li&gt;&#xA;&lt;li&gt;QWeb 模板语言&lt;/li&gt;&#xA;&lt;li&gt;看板视图的继承&lt;/li&gt;&#xA;&lt;li&gt;添加自定义 CSS 和 JavaScript&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h2 id=&#34;开发准备&#34;&gt;开发准备&lt;/h2&gt;&#xA;&lt;p&gt;我们将继续使用第十章 &lt;a href=&#34;10.md&#34;&gt;Odoo 12开发之后台视图 - 设计用户界面&lt;/a&gt;完成的library_checkout插件模块。相应代码请见 &lt;a href=&#34;source-code/chapter10&#34;&gt;GitHub仓库&lt;/a&gt;。本章完成后的代码也请参见&lt;a href=&#34;source-code/chapter11&#34;&gt;GitHub仓库&lt;/a&gt;。&lt;/p&gt;&#xA;&lt;h2 id=&#34;了解看板&#34;&gt;了解看板&lt;/h2&gt;&#xA;&lt;p&gt;Kanban 是一个日语词汇，字面意思榜单，与精益制造和准时化生产相关联，由丰田工业工程师大野耐一(Taiichi Ohno)引入。最近看板的概念应用于更多领域，并且随着敏捷方法的施行在软件工业内流行起来。&lt;/p&gt;&#xA;&lt;p&gt;看板让我们能够可视化工作队列，它以列来进行组织，每列代表工作进程的一个阶段。工作项以放在看板对应列的卡片来表示。新的工作项从最左边的列开始，并开始向右移动直至最右边列，代表工作完成。&lt;/p&gt;&#xA;&lt;p&gt;看板的简单化或视觉效果让其对简单的业务流程有着优异的支持。一个基本的看板示例包含三列，如下图所示：待办、在办和完成。当然它可以扩展为你需要的其它指定流程：&lt;/p&gt;&#xA;&lt;p&gt;&lt;img src=&#34;http://alanhou.org/homepage/wp-content/uploads/2019/01/kanban-example.jpg&#34; alt=&#34;看板示例&#34;&gt;&lt;/p&gt;&#xA;&lt;p&gt;对许多业务用例，看板都是管理相应流程的更有效方式，与 Odoo 11之前的更重的工作流引擎形成鲜明对比。Odoo 在支持经典的列表和表单视图的同时还支持看板视图，这易于我们实施这种类型的视图。下面就让我们一起来学习如何使用看板视图。&lt;/p&gt;&#xA;&lt;h3 id=&#34;看板视图&#34;&gt;看板视图&lt;/h3&gt;&#xA;&lt;p&gt;现在我们要为借阅模型添加一个看板视图。每个借阅是一个卡片，看板将会被组织成阶段列。在前面的文章中，我们已经添加了stage_id阶段字段。&lt;/p&gt;&#xA;&lt;p&gt;此前在表单视图我们大部分时候使用 Odoo 独有的 XML 元素，比如&lt;!-- raw HTML omitted --&gt;和&lt;!-- raw HTML omitted --&gt;，有时也会使用 HTML 元素，如&lt;!-- raw HTML omitted --&gt;或&lt;!-- raw HTML omitted --&gt;，但用得较少。在看板视图中则恰恰相反，展示模板基于 HTML，仅支持两个 Odoo 独有的元素：&lt;!-- raw HTML omitted --&gt;和&lt;!-- raw HTML omitted --&gt;。&lt;/p&gt;</description>
    </item>
    <item>
      <title>第十二章 Odoo 12开发之报表和服务端 QWeb</title>
      <link>/odoo/12/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>/odoo/12/</guid>
      <description>&lt;p&gt;本文为&lt;a href=&#34;README.md&#34;&gt;最好用的免费ERP系统Odoo 12开发手册&lt;/a&gt;系列文章第十二篇。&lt;/p&gt;&#xA;&lt;p&gt;报表是业务应用非常有价值的功能，内置的 QWeb 引擎是报表的默认引擎。使用 QWeb 模板设计的报表可生成 HTML 文件并被转化成 PDF。也就是说我们可以很便捷地利用已学习的 QWeb 知识，应用到业务报表中。本文中我们将为图书馆应用添加一个报表，复习 QWeb生成报表的关键技巧。包括像汇总一类计算、翻译和纸张样式打印。&lt;/p&gt;&#xA;&lt;p&gt;本文主要内容有：&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;安装wkhtmltopdf&lt;/li&gt;&#xA;&lt;li&gt;创建业务报表&lt;/li&gt;&#xA;&lt;li&gt;QWeb 报表模板&lt;/li&gt;&#xA;&lt;li&gt;在报表中展示数据&lt;/li&gt;&#xA;&lt;li&gt;渲染图片&lt;/li&gt;&#xA;&lt;li&gt;报表汇总&lt;/li&gt;&#xA;&lt;li&gt;定义纸质格式&lt;/li&gt;&#xA;&lt;li&gt;在报表中启用语言翻译&lt;/li&gt;&#xA;&lt;li&gt;使用自定义 SQL 建立报表&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h2 id=&#34;开发准备&#34;&gt;开发准备&lt;/h2&gt;&#xA;&lt;p&gt;我们将继续使用library_app插件模块进行学习，该模块在第三章 &lt;a href=&#34;3.md&#34;&gt;Odoo 12 开发之创建第一个 Odoo 应用&lt;/a&gt;中初次创建，然后在第五章 &lt;a href=&#34;5.md&#34;&gt;Odoo 12开发之导入、导出以及模块数据&lt;/a&gt;和第六章 &lt;a href=&#34;6.md&#34;&gt;Odoo 12开发之模型 - 结构化应用数据&lt;/a&gt;中进行了改进。相关代码请参见 &lt;a href=&#34;source-code/chapter11&#34;&gt;GitHub 仓库&lt;/a&gt;。本文完成后代码也请参见&lt;a href=&#34;source-code/chapter12&#34;&gt;GitHub 仓库&lt;/a&gt;。&lt;/p&gt;&#xA;&lt;h2 id=&#34;安装wkhtmltopdf&#34;&gt;安装wkhtmltopdf&lt;/h2&gt;&#xA;&lt;p&gt;要正确地生成报表，应安装wkhtmltopdf工具的推荐版本，该工具的名称表示Webkit HTML to PDF。Odoo使用它来将渲染的 HTML 页面转化为 PDF 文档。有些版本的wkhtmltopdf库已知存在问题，比如不打印页面头部和底部，所以需挑选使用的版本。从Odoo 10开始，官方支持了0.12.5版本，这也是官方推荐的版本。&lt;/p&gt;&#xA;&lt;blockquote&gt;&#xA;&lt;p&gt;**小贴士：**官方Odoo项目有一个 wiki 页面，保持了对于wkthtmltopdf使用的信息和推荐。可通过 &lt;a href=&#34;https://github.com/odoo/odoo/wiki/Wkhtmltopdf&#34;&gt;GitHub&lt;/a&gt; 进行查看。&lt;/p&gt;</description>
    </item>
    <item>
      <title>第十三章 Odoo 12开发之创建网站前端功能</title>
      <link>/odoo/13/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>/odoo/13/</guid>
      <description>&lt;p&gt;本文为&lt;a href=&#34;README.md&#34;&gt;最好用的免费ERP系统Odoo 12开发手册&lt;/a&gt;系列文章第十三篇。&lt;/p&gt;&#xA;&lt;p&gt;Odoo 起初是一个后台系统，但很快就有了前端界面的需求。早期基于后台界面的门户界面不够灵活并且对移动端不友好。为解决这一问题，Odoo 引入了新的网站功能，为系统添加了 CMS(Content Management System)内容管理系统。这使得我们无需集成第三方 CMS 便可创建美观又高效的前端。本文中我们将学习如何利用 Odoo 自带的网站功能开发面向前端的插件模块。&lt;/p&gt;&#xA;&lt;p&gt;本文主要内容有：&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;学习项目 - 自助图书馆&lt;/li&gt;&#xA;&lt;li&gt;第一个网页&lt;/li&gt;&#xA;&lt;li&gt;创建网站&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h2 id=&#34;开发准备&#34;&gt;开发准备&lt;/h2&gt;&#xA;&lt;p&gt;我将用第十一章 &lt;a href=&#34;11.md&#34;&gt;Odoo 12开发之看板视图和用户端 QWeb&lt;/a&gt;中最后编辑的library_checkout插件模块，代码请见&lt;a href=&#34;source-code/chapter11&#34;&gt;GitHub 仓库&lt;/a&gt;。本文完成后的代码也请参见&lt;a href=&#34;source-code/chapter13&#34;&gt;GitHub 仓库&lt;/a&gt;。&lt;/p&gt;&#xA;&lt;h2 id=&#34;学习项目---自助图书馆&#34;&gt;学习项目 - 自助图书馆&lt;/h2&gt;&#xA;&lt;p&gt;本文中我们将为图书会员添加一个自助服务功能。可供会员分别登录账号来访问他们的借阅请求列表。这样我们就可以学习网站开发的基本技术：创建动态页面、在页面间传递参数、创建表单以及处理表单数据验证。对这些新的图书网站功能，我们要新建一个插件模块library_website。&lt;/p&gt;&#xA;&lt;p&gt;大家应该已经轻车熟路了，首先创建插件的声明文件ibrary_website/&lt;strong&gt;manifest&lt;/strong&gt;.py，代码如下：&lt;/p&gt;&#xA;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;{&#xA;    &amp;#39;name&amp;#39;: &amp;#39;Library Website&amp;#39;,&#xA;    &amp;#39;description&amp;#39;: &amp;#39;Create and check book checkout requests.&amp;#39;,&#xA;    &amp;#39;author&amp;#39;: &amp;#39;Alan Hou&amp;#39;,&#xA;    &amp;#39;depends&amp;#39;: [&#xA;        &amp;#39;library_checkout&amp;#39;&#xA;    ],&#xA;    &amp;#39;data&amp;#39;: [&#xA;        &amp;#39;security/ir.model.access.csv&amp;#39;,&#xA;        &amp;#39;security/library_security.xml&amp;#39;,&#xA;        &amp;#39;views/library_member.xml&amp;#39;,&#xA;    ],&#xA;}&#xA;&lt;/code&gt;&lt;/pr</description>
    </item>
    <item>
      <title>第十四章 Odoo 12开发之部署和维护生产实例</title>
      <link>/odoo/14/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>/odoo/14/</guid>
      <description>&lt;p&gt;本文为&lt;a href=&#34;README.md&#34;&gt;最好用的免费ERP系统Odoo 12开发手册&lt;/a&gt;系列文章第十四篇暨完结篇。&lt;/p&gt;&#xA;&lt;p&gt;本文中将学习将 Odoo 服务器作为生产环境的基本准备。安装和维护服务器是一个复杂的话题，应该由专业人员完成。本文中所学习的不足以保证普通用户创建应对包含敏感数据和服务的健壮、安全环境。&lt;/p&gt;&#xA;&lt;p&gt;本文旨在介绍 Odoo 部署的重要配置和最佳实践，这样系统管理员可以更好地准备 Odoo 服务器主机。通过本文的学习，我们将能创建一个相对安全的 Odoo 服务器，足够应对普通的生产环境使用。本文所述并非部署 Odoo 的唯一方法，其它的方法也会同样适用。&lt;/p&gt;&#xA;&lt;p&gt;本文主要内容有：&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;通过源码安装 Odoo，主要包含：&#xA;&lt;ul&gt;&#xA;&lt;li&gt;安装依赖&lt;/li&gt;&#xA;&lt;li&gt;准备一个独立的系统用户&lt;/li&gt;&#xA;&lt;li&gt;通过源码安装&lt;/li&gt;&#xA;&lt;li&gt;设置配置文件&lt;/li&gt;&#xA;&lt;li&gt;多进程&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;设置 Odoo 为系统服务，主要包含：&#xA;&lt;ul&gt;&#xA;&lt;li&gt;创建 systemd 服务&lt;/li&gt;&#xA;&lt;li&gt;创建自启动或 sysvinit 服务&lt;/li&gt;&#xA;&lt;li&gt;通过命令行查看 Odoo 服务&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;设置 Nginx 反向代理&lt;/li&gt;&#xA;&lt;li&gt;配置HTTPS安全服务, 主要包含 :&#xA;&lt;ul&gt;&#xA;&lt;li&gt;创建自签名SSL证书&lt;/li&gt;&#xA;&lt;li&gt;在 Nginx 上配置 HTTPS访问&lt;/li&gt;&#xA;&lt;li&gt;缓存静态内容&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;服务器和模块更新，主要包含：&#xA;&lt;ul&gt;&#xA;&lt;li&gt;创建模拟环境&lt;/li&gt;&#xA;&lt;li&gt;更新 Odoo 源码&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h2 id=&#34;开发准备&#34;&gt;开发准备&lt;/h2&gt;&#xA;&lt;p&gt;本章无需使用前面开发的代码，相关代码和脚本请见 &lt;a href=&#34;source-code&#34;&gt;GitHub 仓库&lt;/a&gt;。&lt;/p&gt;</description>
    </item>
  </channel>
</rss>
